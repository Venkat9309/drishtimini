
surveillance_bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001312  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000938  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000782  00000000  00000000  000021ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  0000293c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b4  00000000  00000000  00002a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000067c  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000036a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	5c c0       	rjmp	.+184    	; 0xc2 <__vector_2>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	78 d0       	rcall	.+240    	; 0x19a <main>
  aa:	a4 c1       	rjmp	.+840    	; 0x3f4 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <_Z8PWM_initv>:
		  }
		  void revleft()
		  {
			  PORTA = 0x00;
			  OCR1A = 200;
			  OCR1B = 125;
  ae:	8e b5       	in	r24, 0x2e	; 46
  b0:	89 60       	ori	r24, 0x09	; 9
  b2:	8e bd       	out	0x2e, r24	; 46
  b4:	8f b5       	in	r24, 0x2f	; 47
  b6:	8a 6a       	ori	r24, 0xAA	; 170
  b8:	8f bd       	out	0x2f, r24	; 47
  ba:	87 b3       	in	r24, 0x17	; 23
  bc:	80 66       	ori	r24, 0x60	; 96
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret

000000c2 <__vector_2>:
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	85 bb       	out	0x15, r24	; 21
  d6:	87 ea       	ldi	r24, 0xA7	; 167
  d8:	91 e6       	ldi	r25, 0x61	; 97
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <__vector_2+0x18>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <__vector_2+0x1e>
  e0:	00 00       	nop
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <_Z15SPI_master_initv>:
  fc:	8d b1       	in	r24, 0x0d	; 13
  fe:	8f 67       	ori	r24, 0x7F	; 127
 100:	8d b9       	out	0x0d, r24	; 13
 102:	70 9a       	sbi	0x0e, 0	; 14
 104:	08 95       	ret

00000106 <_Z9SPI_writeh>:
 106:	8f b9       	out	0x0f, r24	; 15
 108:	77 9b       	sbis	0x0e, 7	; 14
 10a:	fe cf       	rjmp	.-4      	; 0x108 <_Z9SPI_writeh+0x2>
 10c:	8b e4       	ldi	r24, 0x4B	; 75
 10e:	9d e1       	ldi	r25, 0x1D	; 29
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <_Z9SPI_writeh+0xa>
 114:	00 c0       	rjmp	.+0      	; 0x116 <_Z9SPI_writeh+0x10>
 116:	00 00       	nop
 118:	8f b1       	in	r24, 0x0f	; 15
 11a:	08 95       	ret

0000011c <_Z7forwardv>:
 11c:	83 ec       	ldi	r24, 0xC3	; 195
 11e:	8b bb       	out	0x1b, r24	; 27
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	9b bd       	out	0x2b, r25	; 43
 126:	8a bd       	out	0x2a, r24	; 42
 128:	99 bd       	out	0x29, r25	; 41
 12a:	88 bd       	out	0x28, r24	; 40
 12c:	08 95       	ret

0000012e <_Z8backwardv>:
 12e:	1b ba       	out	0x1b, r1	; 27
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	9b bd       	out	0x2b, r25	; 43
 136:	8a bd       	out	0x2a, r24	; 42
 138:	99 bd       	out	0x29, r25	; 41
 13a:	88 bd       	out	0x28, r24	; 40
 13c:	08 95       	ret

0000013e <_Z4leftv>:
 13e:	81 e8       	ldi	r24, 0x81	; 129
 140:	8b bb       	out	0x1b, r24	; 27
 142:	1b bc       	out	0x2b, r1	; 43
 144:	1a bc       	out	0x2a, r1	; 42
 146:	8d e7       	ldi	r24, 0x7D	; 125
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	99 bd       	out	0x29, r25	; 41
 14c:	88 bd       	out	0x28, r24	; 40
 14e:	08 95       	ret

00000150 <_Z5rightv>:
 150:	82 e4       	ldi	r24, 0x42	; 66
 152:	8b bb       	out	0x1b, r24	; 27
 154:	8d e7       	ldi	r24, 0x7D	; 125
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	9b bd       	out	0x2b, r25	; 43
 15a:	8a bd       	out	0x2a, r24	; 42
 15c:	19 bc       	out	0x29, r1	; 41
 15e:	18 bc       	out	0x28, r1	; 40
 160:	08 95       	ret

00000162 <_Z5sleftv>:
 162:	81 e8       	ldi	r24, 0x81	; 129
 164:	8b bb       	out	0x1b, r24	; 27
 166:	88 ec       	ldi	r24, 0xC8	; 200
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	9b bd       	out	0x2b, r25	; 43
 16c:	8a bd       	out	0x2a, r24	; 42
 16e:	8d e7       	ldi	r24, 0x7D	; 125
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	99 bd       	out	0x29, r25	; 41
 174:	88 bd       	out	0x28, r24	; 40
 176:	08 95       	ret

00000178 <_Z6srightv>:
 178:	82 e4       	ldi	r24, 0x42	; 66
 17a:	8b bb       	out	0x1b, r24	; 27
 17c:	8d e7       	ldi	r24, 0x7D	; 125
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	9b bd       	out	0x2b, r25	; 43
 182:	8a bd       	out	0x2a, r24	; 42
 184:	88 ec       	ldi	r24, 0xC8	; 200
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	99 bd       	out	0x29, r25	; 41
 18a:	88 bd       	out	0x28, r24	; 40
 18c:	08 95       	ret

0000018e <_Z4stopv>:
		  }
		  void stop()
		  {
			  
			  PORTA = 0x00;
 18e:	1b ba       	out	0x1b, r1	; 27
			  OCR1A = 0;
 190:	1b bc       	out	0x2b, r1	; 43
 192:	1a bc       	out	0x2a, r1	; 42
			  OCR1B = 0;
 194:	19 bc       	out	0x29, r1	; 41
 196:	18 bc       	out	0x28, r1	; 40
 198:	08 95       	ret

0000019a <main>:
  float rx,ry,lx,ly;
  int cir_rx,cir_ry,cir_lx,cir_ly; 
  
  
  // do the initialization of the ports according to the use
  DDRB = 0b00000111;
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	87 bb       	out	0x17, r24	; 23
  DDRC = 0b11111111;
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	84 bb       	out	0x14, r24	; 20
  DDRA = 0b11111111;
 1a2:	8a bb       	out	0x1a, r24	; 26
  DDRD = 0b11111111;
 1a4:	81 bb       	out	0x11, r24	; 17
  DDRF = 0b11111111;
 1a6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
  
  PORTB |= (1 << PINB5) | (1 << PINB6) | (1 << PINB7);
 1aa:	88 b3       	in	r24, 0x18	; 24
 1ac:	80 6e       	ori	r24, 0xE0	; 224
 1ae:	88 bb       	out	0x18, r24	; 24
  ICR1 = 255;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	97 bd       	out	0x27, r25	; 39
 1b6:	86 bd       	out	0x26, r24	; 38
  
  SPI_master_init();
 1b8:	a1 df       	rcall	.-190    	; 0xfc <_Z15SPI_master_initv>
  
  EIMSK |= (1<<INT1);
 1ba:	89 b7       	in	r24, 0x39	; 57
 1bc:	82 60       	ori	r24, 0x02	; 2
 1be:	89 bf       	out	0x39, r24	; 57
  EICRA |= (1<<ISC01); //falling edge generates interrupt request
 1c0:	ea e6       	ldi	r30, 0x6A	; 106
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	82 60       	ori	r24, 0x02	; 2
 1c8:	80 83       	st	Z, r24

  PORTD |=(1 << PIND1); 
  
  
  PWM_init();
 1ca:	91 9a       	sbi	0x12, 1	; 18
 1cc:	70 df       	rcall	.-288    	; 0xae <_Z8PWM_initv>
 
  while(d!= 0x73)
  {    
	   PORTB|=(1<<PINB2)|(1<<PINB1); //set
 1ce:	88 b3       	in	r24, 0x18	; 24
 1d0:	86 60       	ori	r24, 0x06	; 6
 1d2:	88 bb       	out	0x18, r24	; 24
	   PORTB&=~(1<<PINB0); //clr   // slave select setting to low
	   
	   
	   SPI_write(0x01); //entering config mode
 1d4:	c0 98       	cbi	0x18, 0	; 24
 1d6:	81 e0       	ldi	r24, 0x01	; 1
	   SPI_write(0x43);
 1d8:	96 df       	rcall	.-212    	; 0x106 <_Z9SPI_writeh>
 1da:	83 e4       	ldi	r24, 0x43	; 67
	   SPI_write(0x00);
 1dc:	94 df       	rcall	.-216    	; 0x106 <_Z9SPI_writeh>
 1de:	80 e0       	ldi	r24, 0x00	; 0
	   SPI_write(0x01);
 1e0:	92 df       	rcall	.-220    	; 0x106 <_Z9SPI_writeh>
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 df       	rcall	.-224    	; 0x106 <_Z9SPI_writeh>
	   SPI_write(0x00);
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	8e df       	rcall	.-228    	; 0x106 <_Z9SPI_writeh>
 1ea:	c2 9a       	sbi	0x18, 2	; 24
	   
	   PORTB|=(1<<PINB2);
 1ec:	89 ef       	ldi	r24, 0xF9	; 249
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <main+0x56>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x5c>
 1f6:	00 00       	nop
 1f8:	c0 9a       	sbi	0x18, 0	; 24
	   _delay_ms(1);
	   PORTB|=(1<<PINB0);
 1fa:	83 ec       	ldi	r24, 0xC3	; 195
 1fc:	99 e0       	ldi	r25, 0x09	; 9
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0x64>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x6a>
 204:	00 00       	nop

	   _delay_ms(10);

	   
	   PORTB|=(1<<PINB2)|(1<<PINB1); //setting
 206:	88 b3       	in	r24, 0x18	; 24
 208:	86 60       	ori	r24, 0x06	; 6
	   
	   PORTB&=~(1<<PINB0); // clearing
 20a:	88 bb       	out	0x18, r24	; 24

	   SPI_write(0x01); //setting analog mode
 20c:	c0 98       	cbi	0x18, 0	; 24
 20e:	81 e0       	ldi	r24, 0x01	; 1
	   SPI_write(0x44);
 210:	7a df       	rcall	.-268    	; 0x106 <_Z9SPI_writeh>
 212:	84 e4       	ldi	r24, 0x44	; 68
	   SPI_write(0x00);
 214:	78 df       	rcall	.-272    	; 0x106 <_Z9SPI_writeh>
 216:	80 e0       	ldi	r24, 0x00	; 0
	   SPI_write(0x01);   // 0x01 for analog and 0x00 for digital mode
 218:	76 df       	rcall	.-276    	; 0x106 <_Z9SPI_writeh>
 21a:	81 e0       	ldi	r24, 0x01	; 1
	   SPI_write(0x03);   // controller mode is locked
 21c:	74 df       	rcall	.-280    	; 0x106 <_Z9SPI_writeh>
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	72 df       	rcall	.-284    	; 0x106 <_Z9SPI_writeh>
	   SPI_write(0x00);
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	70 df       	rcall	.-288    	; 0x106 <_Z9SPI_writeh>
 226:	80 e0       	ldi	r24, 0x00	; 0
	   SPI_write(0x00);
 228:	6e df       	rcall	.-292    	; 0x106 <_Z9SPI_writeh>
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	6c df       	rcall	.-296    	; 0x106 <_Z9SPI_writeh>
	   SPI_write(0x00);
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	6a df       	rcall	.-300    	; 0x106 <_Z9SPI_writeh>
 232:	c2 9a       	sbi	0x18, 2	; 24
	   SPI_write(0x00);
 234:	89 ef       	ldi	r24, 0xF9	; 249
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	01 97       	sbiw	r24, 0x01	; 1

	   PORTB|=(1<<PINB2);
 23a:	f1 f7       	brne	.-4      	; 0x238 <main+0x9e>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0xa4>
 23e:	00 00       	nop
 240:	c0 9a       	sbi	0x18, 0	; 24
 242:	83 ec       	ldi	r24, 0xC3	; 195
 244:	99 e0       	ldi	r25, 0x09	; 9
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <main+0xac>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0xb2>
	   PORTB|=(1<<PINB0);

	   _delay_ms(10);

	   
	   PORTB|=(1<<PINB2)|(1<<PINB1);
 24c:	00 00       	nop
 24e:	88 b3       	in	r24, 0x18	; 24
	   PORTB&=~(1<<PINB0);

	   SPI_write(0x01);/*was using this to poll.The code will work fine even without this*/
 250:	86 60       	ori	r24, 0x06	; 6
 252:	88 bb       	out	0x18, r24	; 24
	   SPI_write(0x43);
 254:	c0 98       	cbi	0x18, 0	; 24
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	56 df       	rcall	.-340    	; 0x106 <_Z9SPI_writeh>
	   SPI_write(0x00);
 25a:	83 e4       	ldi	r24, 0x43	; 67
 25c:	54 df       	rcall	.-344    	; 0x106 <_Z9SPI_writeh>
 25e:	80 e0       	ldi	r24, 0x00	; 0
	   SPI_write(0x00);
 260:	52 df       	rcall	.-348    	; 0x106 <_Z9SPI_writeh>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	50 df       	rcall	.-352    	; 0x106 <_Z9SPI_writeh>
	   SPI_write(0x5A);
 266:	8a e5       	ldi	r24, 0x5A	; 90
 268:	4e df       	rcall	.-356    	; 0x106 <_Z9SPI_writeh>
 26a:	8a e5       	ldi	r24, 0x5A	; 90
	   SPI_write(0x5A);
 26c:	4c df       	rcall	.-360    	; 0x106 <_Z9SPI_writeh>
 26e:	8a e5       	ldi	r24, 0x5A	; 90
 270:	4a df       	rcall	.-364    	; 0x106 <_Z9SPI_writeh>
	   SPI_write(0x5A);
 272:	8a e5       	ldi	r24, 0x5A	; 90
 274:	48 df       	rcall	.-368    	; 0x106 <_Z9SPI_writeh>
 276:	8a e5       	ldi	r24, 0x5A	; 90
	   SPI_write(0x5A);
 278:	46 df       	rcall	.-372    	; 0x106 <_Z9SPI_writeh>
 27a:	c2 9a       	sbi	0x18, 2	; 24
	   SPI_write(0x5A);
 27c:	89 ef       	ldi	r24, 0xF9	; 249
 27e:	90 e0       	ldi	r25, 0x00	; 0

	   PORTB|=(1<<PINB2);
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <main+0xe6>
 284:	00 c0       	rjmp	.+0      	; 0x286 <main+0xec>
 286:	00 00       	nop
 288:	c0 9a       	sbi	0x18, 0	; 24
 28a:	83 ec       	ldi	r24, 0xC3	; 195
 28c:	99 e0       	ldi	r25, 0x09	; 9
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <main+0xf4>
	   _delay_ms(10);


	   
	   
	   PORTB|=(1<<PINB2)|(1<<PINB1);
 292:	00 c0       	rjmp	.+0      	; 0x294 <main+0xfa>
 294:	00 00       	nop
 296:	88 b3       	in	r24, 0x18	; 24
	   PORTB&=~(1<<PINB0);
 298:	86 60       	ori	r24, 0x06	; 6
	    SPI_write(0x01);
 29a:	88 bb       	out	0x18, r24	; 24
 29c:	c0 98       	cbi	0x18, 0	; 24
 29e:	81 e0       	ldi	r24, 0x01	; 1
	   d= SPI_write(0x42); //making sure we're in the analog mode the value of d will be 0x73
 2a0:	32 df       	rcall	.-412    	; 0x106 <_Z9SPI_writeh>
 2a2:	82 e4       	ldi	r24, 0x42	; 66
 2a4:	30 df       	rcall	.-416    	; 0x106 <_Z9SPI_writeh>
 2a6:	c8 2f       	mov	r28, r24
	   SPI_write(0x00);   // if d is not equal to 0x73 this loop will repeat
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	2d df       	rcall	.-422    	; 0x106 <_Z9SPI_writeh>
 2ac:	80 e0       	ldi	r24, 0x00	; 0
	   SPI_write(0x00);
 2ae:	2b df       	rcall	.-426    	; 0x106 <_Z9SPI_writeh>
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	29 df       	rcall	.-430    	; 0x106 <_Z9SPI_writeh>
	   SPI_write(0x00);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	27 df       	rcall	.-434    	; 0x106 <_Z9SPI_writeh>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
	   SPI_write(0x00);
 2ba:	25 df       	rcall	.-438    	; 0x106 <_Z9SPI_writeh>
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	23 df       	rcall	.-442    	; 0x106 <_Z9SPI_writeh>
	   SPI_write(0x00);
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	21 df       	rcall	.-446    	; 0x106 <_Z9SPI_writeh>
 2c4:	c2 9a       	sbi	0x18, 2	; 24
	   SPI_write(0x00);
 2c6:	89 ef       	ldi	r24, 0xF9	; 249
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	01 97       	sbiw	r24, 0x01	; 1
	   SPI_write(0x00);
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <main+0x130>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x136>
	   PORTB|=(1<<PINB2);
 2d0:	00 00       	nop
 2d2:	c0 9a       	sbi	0x18, 0	; 24
 2d4:	83 ec       	ldi	r24, 0xC3	; 195
 2d6:	99 e0       	ldi	r25, 0x09	; 9
 2d8:	01 97       	sbiw	r24, 0x01	; 1
	   _delay_ms(1);
	   PORTB|=(1<<PINB0);
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0x13e>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x144>
 2de:	00 00       	nop
 2e0:	9f e3       	ldi	r25, 0x3F	; 63
 2e2:	2d e0       	ldi	r18, 0x0D	; 13
 2e4:	83 e0       	ldi	r24, 0x03	; 3
 2e6:	91 50       	subi	r25, 0x01	; 1
 2e8:	20 40       	sbci	r18, 0x00	; 0
 2ea:	80 40       	sbci	r24, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <main+0x14c>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0x156>
 2f0:	00 00       	nop
  PORTD |=(1 << PIND1); 
  
  
  PWM_init();
 
  while(d!= 0x73)
 2f2:	c3 37       	cpi	r28, 0x73	; 115
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <main+0x15e>
 2f6:	6b cf       	rjmp	.-298    	; 0x1ce <main+0x34>
      while(d==0x73)
      {
	      while (1)
	      {
		     
		      PORTB |= (1<<PINB2) | (1<<PINB1);
 2f8:	88 b3       	in	r24, 0x18	; 24
 2fa:	86 60       	ori	r24, 0x06	; 6
 2fc:	88 bb       	out	0x18, r24	; 24
		      PORTB&=~(1<<PINB0);
 2fe:	c0 98       	cbi	0x18, 0	; 24
		      a=SPI_write(0x01);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	01 df       	rcall	.-510    	; 0x106 <_Z9SPI_writeh>
 304:	82 e4       	ldi	r24, 0x42	; 66
		      b=SPI_write(0x42);
 306:	ff de       	rcall	.-514    	; 0x106 <_Z9SPI_writeh>
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	fd de       	rcall	.-518    	; 0x106 <_Z9SPI_writeh>
		      c=SPI_write(0x00);
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	fb de       	rcall	.-522    	; 0x106 <_Z9SPI_writeh>
 310:	d8 2f       	mov	r29, r24
		      

		      data0 = SPI_write(0x00); //buttons set 1 8
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	f8 de       	rcall	.-528    	; 0x106 <_Z9SPI_writeh>
 316:	c8 2f       	mov	r28, r24
 318:	80 e0       	ldi	r24, 0x00	; 0
		      data1 = SPI_write(0x00); //button set 2  8
 31a:	f5 de       	rcall	.-534    	; 0x106 <_Z9SPI_writeh>
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	f3 de       	rcall	.-538    	; 0x106 <_Z9SPI_writeh>
 320:	80 e0       	ldi	r24, 0x00	; 0
		      data2 = SPI_write(0x00); //  rx
 322:	f1 de       	rcall	.-542    	; 0x106 <_Z9SPI_writeh>
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	ef de       	rcall	.-546    	; 0x106 <_Z9SPI_writeh>
		      data3 = SPI_write(0x00); //  ry
 328:	00 00       	nop
 32a:	c2 9a       	sbi	0x18, 2	; 24
 32c:	00 00       	nop
		      data4 = SPI_write(0x00); //  lx
 32e:	c0 9a       	sbi	0x18, 0	; 24
 330:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
		      data5 = SPI_write(0x00); //  ly
 334:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 338:	89 2b       	or	r24, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33a:	11 f4       	brne	.+4      	; 0x340 <main+0x1a6>
			  
			   
		      _delay_us(1);
		      PORTB|=(1<<PINB2);
 33c:	78 94       	sei
 33e:	0e c0       	rjmp	.+28     	; 0x35c <main+0x1c2>
		      _delay_us(1);
		      PORTB|=(1<<PINB0);
 340:	f8 94       	cli
			  
			  
			  //INTERUPT SETUP
			  if (cliflag==0)
 342:	9f e3       	ldi	r25, 0x3F	; 63
 344:	2d e0       	ldi	r18, 0x0D	; 13
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	91 50       	subi	r25, 0x01	; 1
 34a:	20 40       	sbci	r18, 0x00	; 0
			  {
				  sei();
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x1ae>
			  }
			  else
			  {
				  cli();
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x1b8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 352:	00 00       	nop
 354:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 358:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 35c:	89 ef       	ldi	r24, 0xF9	; 249
 35e:	90 e0       	ldi	r25, 0x00	; 0
				  _delay_ms(1000);
				  cliflag=0;
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <main+0x1c6>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x1cc>
 366:	00 00       	nop
 368:	89 ef       	ldi	r24, 0xF9	; 249
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <main+0x1d2>
 370:	00 c0       	rjmp	.+0      	; 0x372 <main+0x1d8>
 372:	00 00       	nop
 374:	89 ef       	ldi	r24, 0xF9	; 249
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	f1 f7       	brne	.-4      	; 0x378 <main+0x1de>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <main+0x1e4>
 37e:	00 00       	nop
 380:	89 ef       	ldi	r24, 0xF9	; 249
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <main+0x1ea>
 388:	00 c0       	rjmp	.+0      	; 0x38a <main+0x1f0>
 38a:	00 00       	nop
 38c:	c4 fd       	sbrc	r28, 4
		
		 //===================================================================================================================
		 
		 // test cases
		 
		 if(~data1 & (1<<triangle))  //up
 38e:	02 c0       	rjmp	.+4      	; 0x394 <main+0x1fa>
		 {
			 forward();
 390:	c5 de       	rcall	.-630    	; 0x11c <_Z7forwardv>
 392:	b2 cf       	rjmp	.-156    	; 0x2f8 <main+0x15e>
 394:	c5 fd       	sbrc	r28, 5
			 
		 }
		 else if(~data1 & (1<<circle))   //right
 396:	02 c0       	rjmp	.+4      	; 0x39c <main+0x202>
		 {
			 sright();
 398:	ef de       	rcall	.-546    	; 0x178 <_Z6srightv>
 39a:	ae cf       	rjmp	.-164    	; 0x2f8 <main+0x15e>
		 }
		 else if(~data1 & (1 << cross) )   //down
 39c:	c6 fd       	sbrc	r28, 6
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <main+0x20a>
		 {
			 backward(); 
 3a0:	c6 de       	rcall	.-628    	; 0x12e <_Z8backwardv>
 3a2:	aa cf       	rjmp	.-172    	; 0x2f8 <main+0x15e>
 3a4:	cc 23       	and	r28, r28
		 }
		 else if(~data1 & (1 << squ))   //left
 3a6:	14 f0       	brlt	.+4      	; 0x3ac <main+0x212>
 3a8:	dc de       	rcall	.-584    	; 0x162 <_Z5sleftv>
		 {   
			 sleft();
 3aa:	a6 cf       	rjmp	.-180    	; 0x2f8 <main+0x15e>
 3ac:	8c 2f       	mov	r24, r28
 3ae:	80 73       	andi	r24, 0x30	; 48
		 }
		 else if((~data1 & (1 << triangle)) && (~data1 & (1 << circle) ))  //up-right
 3b0:	11 f4       	brne	.+4      	; 0x3b6 <main+0x21c>
 3b2:	ce de       	rcall	.-612    	; 0x150 <_Z5rightv>
 3b4:	a1 cf       	rjmp	.-190    	; 0x2f8 <main+0x15e>
		 {   
			 right();
 3b6:	c0 79       	andi	r28, 0x90	; 144
 3b8:	11 f4       	brne	.+4      	; 0x3be <main+0x224>
 3ba:	c1 de       	rcall	.-638    	; 0x13e <_Z4leftv>
		 }
		 else if((~data1 & (1 << triangle)) && (~data1 & (1 << squ))) //up-left
 3bc:	9d cf       	rjmp	.-198    	; 0x2f8 <main+0x15e>
 3be:	d4 fd       	sbrc	r29, 4
		 {   
			 left();
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <main+0x22c>
 3c2:	ac de       	rcall	.-680    	; 0x11c <_Z7forwardv>
 3c4:	99 cf       	rjmp	.-206    	; 0x2f8 <main+0x15e>
		 }
		 else if((~data0 & (1 << up)))
 3c6:	d6 fd       	sbrc	r29, 6
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <main+0x234>
		 {
			 forward();
 3ca:	b1 de       	rcall	.-670    	; 0x12e <_Z8backwardv>
 3cc:	95 cf       	rjmp	.-214    	; 0x2f8 <main+0x15e>
 3ce:	d5 fd       	sbrc	r29, 5
		 }
		 else if(~data0 & (1 << down))
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <main+0x23c>
 3d2:	d2 de       	rcall	.-604    	; 0x178 <_Z6srightv>
		 {
			 backward();
 3d4:	91 cf       	rjmp	.-222    	; 0x2f8 <main+0x15e>
 3d6:	dd 23       	and	r29, r29
 3d8:	14 f0       	brlt	.+4      	; 0x3de <main+0x244>
		 }
		 else if(~data0 & (1 << rig))
 3da:	c3 de       	rcall	.-634    	; 0x162 <_Z5sleftv>
 3dc:	8d cf       	rjmp	.-230    	; 0x2f8 <main+0x15e>
		 {
			 sright();
 3de:	8d 2f       	mov	r24, r29
 3e0:	80 73       	andi	r24, 0x30	; 48
 3e2:	11 f4       	brne	.+4      	; 0x3e8 <main+0x24e>
		 }
		 else if(~data0 & (1 << lef))
 3e4:	b5 de       	rcall	.-662    	; 0x150 <_Z5rightv>
 3e6:	88 cf       	rjmp	.-240    	; 0x2f8 <main+0x15e>
		 {
			 sleft();
 3e8:	d0 79       	andi	r29, 0x90	; 144
 3ea:	11 f4       	brne	.+4      	; 0x3f0 <main+0x256>
 3ec:	a8 de       	rcall	.-688    	; 0x13e <_Z4leftv>
		 }
		 else if((~data0 & (1 << up)) && (~data0 & (1 << rig)))
 3ee:	84 cf       	rjmp	.-248    	; 0x2f8 <main+0x15e>
 3f0:	ce de       	rcall	.-612    	; 0x18e <_Z4stopv>
 3f2:	82 cf       	rjmp	.-252    	; 0x2f8 <main+0x15e>

000003f4 <_exit>:
		 {
			 right();
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
